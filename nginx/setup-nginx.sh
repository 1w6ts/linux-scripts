#!/bin/bash
#
# setup-nginx.sh - Automated NGINX installation & configuration
#

# exit on error
set -e

# default valuers
HTTP_PORT=80
HTTPS_PORT=443
HTTPS_ENABLED=0

function show_usage {
    echo "Usage: $0 [options]"
    echo "Options:"
    echo " --help               Show this help message"
    echo " --http-port PORT     Specify HTTP port (default: 80)"
    echo " --https-port PORT    Specify HTTPS port (default: 443)"
    echo " --enable-https       Enable HTTPS redirection"
    echo " --skip-ssl           Skip SSL configuration"
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --help)
      show_usage
      exit 0
      ;;
    --http-port)
      HTTP_PORT="$2"
      shift 2
      ;;
    --https-port)
      HTTPS_PORT="$2"
      shift 2
      ;;
    --enable-https)
      HTTPS_ENABLED=1
      shift
      ;;
    --skip-ssl)
      SKIP_SSL=1
      shift
      ;;
    *)
      echo "Unknown option: $1"
      show_usage
      exit 1
      ;;
  esac
done

if [ "$(id -u) -ne 0"]; then
    echo "This script must be run as root" >&2
    exit 1
fi

echo "Starting nginx installation and configuration"

function install_nginx {
    echo "Installing nginx..."

    # detect OS
    if [ -f /etc/debian_version ]; then
    # debian/ubuntu
        apt-get update
        apt-get install -y nginx
    elif [ -f /etc/redhat-release]; then
    # centos/rhel
        yum install -y epel-release
        yum install -y nginx
    else
        echo "Unsupported OS. Please install Nginx manually."
        exit 1
    fi

    # verify installation
    if command -v nginx &> /dev/null; then
        echo "Nginx installed successfully!"
    else
        echo "Nginx installation failed!"
        exit 1
    fi
}

function configure_ports {
    echo "Configuring nginx ports.."

    local http_port=${HTTP_PORT:-80}
    local https_port=${HTTPS_PORT:-443}

    # create a port conf file
    cat > /etc/nginx/conf.d/ports.conf << EOF
# Port Configuration
# Generated by setup-nginx.sh (https://github.com/1w6ts/linux-scripts)

server {
    listen ${http_port} default_server;
    listen [::]:${http_port} default_server;

    # redirect to HTTPS if enabled
    if(\$HTTPS_ENABLED) {
        return 301 https://\$host\$request_uri;
    }

    # default server configuration will be included
    include /etc/nginx/sites-enabled/default;
}

# https server config
server {
    listen ${https_port} ssl http2;
    listen [::]:${https_port} ssl http2;

    ## ssl configuration will be included later
    # include /etc/nginx/snippets/ssl-params.conf;

    # default server config
    include /etc/nginx/sites-enabled/default;
}
EOF

    echo "Port configuration compolete: HTTP on $http_port, HTTPS on $https_port"
}

# func to configure ssl & security settings
function configure_security {
    echo "Configuring security settings..."

    cat > /etc/nginx/conf.d/security-headers.conf << EOF
# security headers
# Generated by setup-nginx.sh (https://github.com/1w6ts/linux-scripts)

add_header X-Content-Type-Options "nosniff" always;
add_header X-Frame-Options "SAMEORIGIN" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "strict-origin-when-cross-origin" always;
add_header Content-Security-Policy "default-src 'self'" always;
EOF

    # basic rate limiting
    cat > /etc/nginx/conf.d/rate-limiting.conf << EOF
# Rate limiting configuration
# Generated by setup-nginx.sh (https://github.com/1w6ts/linux-scripts)

limit_req_zone \$binary_remote_addr zone=one:10m rate=1r/s;
limit_conn_zone \$binary_remote_addr zoone=addr:10m;
EOF

    echo "Security configuration complete"
}

function configure_performance {
    echo "Configuring performance optimizations..."

    cat > /etc/nginx/conf.d/performance.conf << EOF
# Performance optimization
# Generated by setup-nginx.sh (https://github.com/1w6ts/linux-scripts)

# Worker settings
worker_processes auto;
worker_rlimit_nofile 65535;

# connection settings
events {
    worker_connections 1024;
    multi_accept on;
    use epoll;
}

# timeout settings
http {
    keepalive_timeout 65;
    keepalive_requests 100;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    # gzip settings
    gzip on;
    gzip_comp_level 5;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_vary on;
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/vnd.geo+json
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest.json
        application/xhtml+xml
        application/xml
        font/opentype
        image/bmp
        image/svg+xml
        image/x-icon
        text/cache-manifest
        text/css
        text/plain
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy;
    }
EOF

echo "Performance optimization complete."
}

function restart_and_verify {
    echo "Testing nginx configuration..."

    if nginx -t; then
        echo "Configuration test successful!"
    else
        echo "Configuration test failed!"
        exit 1
    fi

    echo "Restarting Nginx..."
    if systemctl restart nginx; then
        echo "Nginx restarted successfully!"
    else
        echo "Failed to restart nginx."
        exit 1
    fi

    systemctl enable nginx

    echo "Nginx setup complete. Service is running and enabled at startup."
    echo "HTTP port: ${HTTP_PORT:-80}"
    echo "HTTPS port: ${HTTPS_PORT:-443}"
}

echo "=== Nginx Setup Script ==="
echo "HTTP Port: $HTTP_PORT"
echo "HTTPS Port: $HTTPS_PORT"
echo "HTTPS Enabled: $HTTPS_ENABLED"
echo "=========================="

install_nginx
configure_ports
configure_security
configure_performance
restart_and_verify

echo "Script completed successfully"